{"version":3,"sources":["dialog.js"],"names":[],"mappingsfile":"dialog.js","sourcesContent":["(function(global) {\n    'use strict';\n    \n    if (typeof module !== 'undefined' && module.exports)\n        module.exports      = Dialog();\n    else\n        global.Dialog    = Dialog();\n    \n    function Dialog(callback) {\n        if (!(this instanceof Dialog))\n            return new Dialog(callback);\n        \n        let remove              = bind(removeEl, '.smalltalk');\n        \n        const BUTTON_OK         = ['OK'];\n        const BUTTON_OK_CANCEL  = ['OK', 'Cancel'];\n        const BUTTON_YES_NO     = ['OK', 'Cancel'];\n        \n        this.alert = (title, msg, options) => {\n            return showDialog(title, msg, '', BUTTON_OK, options);\n        };\n        \n        this.prompt = (title, msg, defaultValue, options) => {\n            let val         = defaultValue || '';\n            var type        = 'text';\n            var valueStr    = '';\n            // input types\n            let inputText    = `<input type=\"text\" value=\"${ val }\" data-name=\"js-input\">`;\n            let inputPass    = `<input type=\"password\" value=\"${ val }\" data-name=\"js-input\">`;\n\n            // check for options\n            if(typeof options !== 'undefined'){\n                type = options.type || 'text';\n            }\n\n            switch(type){\n                case 'password':\n                    valueStr    = inputPass;\n                    break;\n                default:\n                    valueStr    = inputText;\n            }\n\n            return showDialog(title, msg, valueStr, BUTTON_OK_CANCEL, options);\n        };\n        \n        this.confirm = (title, msg, options) => {\n            return showDialog(title, msg, '', BUTTON_YES_NO, options);\n        };\n        \n        function getTemplate(title, msg, value, buttons) {\n            if (!Array.isArray(buttons))\n                throw Error('buttons should be array!');\n            \n            return `<div class=\"page\">\n                <div data-name=\"js-close\" class=\"close-button\"></div>\n                <header>${ title }</header>\n                <div class=\"content-area\">\n                    ${ msg }\n                    ${ value }\n                </div>\n                <div class=\"action-area\">\n                    <div class=\"button-strip\"> ${\n                        buttons.map((name, i) =>\n                            `<button tabindex=${ i } data-name=\"js-${ name.toLowerCase() }\">${ name }</button>`\n                        ).join('')\n                    }\n                    </div>\n                </div>\n            </div>`;\n        }\n        \n        function showDialog(title, msg, value, buttons, options) {\n            let dialog  = document.createElement('div'),\n                \n                closeButtons    = [\n                    'cancel',\n                    'close',\n                    'ok',\n                    'no'\n                ],\n                \n                ok, cancel,\n                \n                promise = new Promise((resolve, reject) => {\n                    let noCancel    = options && !options.cancel;\n                    let empty       = () => {};\n                    \n                    ok      = resolve;\n                    cancel  = reject;\n                    \n                    if (noCancel)\n                        cancel = empty;\n                }),\n                \n                tmpl    = getTemplate(title, msg, value, buttons);\n                \n            dialog.innerHTML = tmpl;\n            dialog.className = 'smalltalk';\n            \n            document.body.appendChild(dialog);\n            \n            find(dialog, ['ok', 'input']).forEach(el =>\n                el.focus()\n            );\n            \n            find(dialog, ['input']).forEach(el => {\n                el.setSelectionRange(0, value.length);\n            });\n            \n            addListeterAll('click', dialog, closeButtons, event =>\n                closeDialog(event.target, dialog, ok, cancel)\n            );\n            \n            ['click', 'contextmenu'].forEach(event =>\n                dialog.addEventListener(event, () =>\n                    find(dialog, ['ok', 'input']).forEach(el =>\n                        el.focus()\n                    )\n                )\n            );\n            \n            dialog.addEventListener('keydown', keyDown(dialog, ok, cancel));\n            \n            return promise;\n        }\n        \n        function keyDown(dialog, ok, cancel) {\n            return event => {\n                const KEY   = {\n                    ENTER : 13,\n                    ESC   : 27,\n                    TAB   : 9,\n                    LEFT  : 37,\n                    UP    : 38,\n                    RIGHT : 39,\n                    DOWN  : 40\n                };\n                \n                let keyCode     = event.keyCode,\n                    el          = event.target;\n                \n                let namesAll    = ['ok', 'cancel', 'input'],\n                    names       = find(dialog, namesAll).map(el =>\n                        getDataName(el)\n                    );\n                \n                switch(keyCode) {\n                case KEY.ENTER:\n                    closeDialog(el, dialog, ok, cancel);\n                    event.preventDefault();\n                    break;\n                \n                case KEY.ESC:\n                    remove();\n                    cancel();\n                    break;\n                \n                case KEY.TAB:\n                    if (event.shiftKey)\n                        tab(dialog, names);\n                    \n                    tab(dialog, names);\n                    event.preventDefault();\n                    break;\n                \n                default:\n                    let is = ['left', 'right', 'up', 'down'].some(name =>\n                        keyCode === KEY[name.toUpperCase()]\n                    );\n                    \n                    if (is)\n                        changeButtonFocus(dialog, names);\n                    \n                    break;\n                }\n                \n                event.stopPropagation();\n            };\n        }\n        \n        function getDataName(el) {\n            return el\n                .getAttribute('data-name')\n                .replace('js-', '');\n        }\n        \n        function changeButtonFocus(dialog, names) {\n            let name        = '',\n                active      = document.activeElement,\n                activeName  = getDataName(active),\n                isButton    = /ok|cancel/.test(activeName),\n                count       = names.length - 1;\n            \n            if (activeName !== 'input' && count && isButton) {\n                if (activeName === 'cancel')\n                    name = 'ok';\n                else\n                    name = 'cancel';\n                    \n                find(dialog, [name]).forEach(el =>\n                    el.focus()\n                );\n            }\n        }\n        \n        function tab(dialog, names) {\n            let active      = document.activeElement,\n                activeName  = getDataName(active),\n                \n                count       = names.length - 1,\n                index       = names.indexOf(activeName);\n            \n            if (index === count)\n                index = 0;\n            else if (index < count)\n                ++index;\n            \n            let name = names[index];\n            \n            find(dialog, [name]).forEach(el =>\n                el.focus()\n            );\n        }\n        \n        function closeDialog(el, dialog, ok, cancel) {\n            let value,\n                name = el\n                    .getAttribute('data-name')\n                    .replace('js-', '');\n            \n            if (/close|cancel/.test(name)) {\n                cancel();\n            } else {\n                value = find(dialog, ['input']).reduce((value, el) => {\n                    return el.value;\n                }, null);\n                \n                ok(value);\n            }\n            \n            remove();\n        }\n        \n        function find(element, names) {\n            let elements = names.map(name =>\n                element.querySelector(`[data-name=\"js-${ name }\"]`)\n            ).filter(el =>\n                el\n            );\n            \n            return elements;\n        }\n        \n        function addListeterAll(event, parent, elements, fn) {\n            find(parent, elements).forEach(el =>\n                el.addEventListener(event, fn)\n            );\n        }\n        \n        function removeEl(name) {\n            var el = document.querySelector(name);\n            \n            el.parentElement.removeChild(el);\n        }\n        \n        function bind(fn, ...args) {\n            return () => fn(...args);\n        }\n    }\n    \n})(typeof window !== 'undefined' && window);\n"],"sourceRoot":"/source/"}