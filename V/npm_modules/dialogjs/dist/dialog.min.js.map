{"version":3,"sources":["dialog.min.js","dialog.js"],"names":["global","Dialog","callback","getTemplate","title","msg","value","buttons","Array","isArray","Error","map","name","i","toLowerCase","join","showDialog","options","dialog","document","createElement","closeButtons","ok","undefined","cancel","promise","Promise","resolve","reject","noCancel","empty","tmpl","innerHTML","className","body","appendChild","find","forEach","el","focus","setSelectionRange","length","addListeterAll","event","closeDialog","target","addEventListener","keyDown","KEY","ENTER","ESC","TAB","LEFT","UP","RIGHT","DOWN","keyCode","namesAll","names","getDataName","preventDefault","remove","shiftKey","tab","is","some","toUpperCase","changeButtonFocus","stopPropagation","getAttribute","replace","active","activeElement","activeName","isButton","test","count","index","indexOf","reduce","element","elements","querySelector","filter","parent","fn","removeEl","parentElement","removeChild","bind","_len","arguments","args","_key","apply","this","BUTTON_OK","BUTTON_OK_CANCEL","BUTTON_YES_NO","alert","prompt","defaultValue","val","type","valueStr","inputText","inputPass","confirm","module","exports","window"],"mappings":"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","file":"dialog.min.js","sourcesContent":["'use strict';\n\n(function (global) {\n    'use strict';\n\n    if (typeof module !== 'undefined' && module.exports) module.exports = Dialog();else global.Dialog = Dialog();\n\n    function Dialog(callback) {\n        if (!(this instanceof Dialog)) return new Dialog(callback);\n\n        var remove = bind(removeEl, '.smalltalk');\n\n        var BUTTON_OK = ['OK'];\n        var BUTTON_OK_CANCEL = ['OK', 'Cancel'];\n        var BUTTON_YES_NO = ['OK', 'Cancel'];\n\n        this.alert = function (title, msg, options) {\n            return showDialog(title, msg, '', BUTTON_OK, options);\n        };\n\n        this.prompt = function (title, msg, defaultValue, options) {\n            var val = defaultValue || '';\n            var type = 'text';\n            var valueStr = '';\n            // input types\n            var inputText = '<input type=\"text\" value=\"' + val + '\" data-name=\"js-input\">';\n            var inputPass = '<input type=\"password\" value=\"' + val + '\" data-name=\"js-input\">';\n\n            // check for options\n            if (typeof options !== 'undefined') {\n                type = options.type || 'text';\n            }\n\n            switch (type) {\n                case 'password':\n                    valueStr = inputPass;\n                    break;\n                default:\n                    valueStr = inputText;\n            }\n\n            return showDialog(title, msg, valueStr, BUTTON_OK_CANCEL, options);\n        };\n\n        this.confirm = function (title, msg, options) {\n            return showDialog(title, msg, '', BUTTON_YES_NO, options);\n        };\n\n        function getTemplate(title, msg, value, buttons) {\n            if (!Array.isArray(buttons)) throw Error('buttons should be array!');\n\n            return '<div class=\"dialog-page\">\\n                <div data-name=\"js-close\" class=\"close-button\"></div>\\n                <header>' + title + '</header>\\n                <div class=\"content-area\">\\n                    ' + msg + '\\n                    ' + value + '\\n                </div>\\n                <div class=\"action-area\">\\n                    <div class=\"button-strip\"> ' + buttons.map(function (name, i) {\n                return '<button tabindex=' + i + ' data-name=\"js-' + name.toLowerCase() + '\">' + name + '</button>';\n            }).join('') + '\\n                    </div>\\n                </div>\\n            </div>';\n        }\n\n        function showDialog(title, msg, value, buttons, options) {\n            var dialog = document.createElement('div'),\n                closeButtons = ['cancel', 'close', 'ok', 'no'],\n                ok = undefined,\n                cancel = undefined,\n                promise = new Promise(function (resolve, reject) {\n                var noCancel = options && !options.cancel;\n                var empty = function empty() {};\n\n                ok = resolve;\n                cancel = reject;\n\n                if (noCancel) cancel = empty;\n            }),\n                tmpl = getTemplate(title, msg, value, buttons);\n\n            dialog.innerHTML = tmpl;\n            dialog.className = 'smalltalk';\n\n            document.body.appendChild(dialog);\n\n            find(dialog, ['ok', 'input']).forEach(function (el) {\n                return el.focus();\n            });\n\n            find(dialog, ['input']).forEach(function (el) {\n                el.setSelectionRange(0, value.length);\n            });\n\n            addListeterAll('click', dialog, closeButtons, function (event) {\n                return closeDialog(event.target, dialog, ok, cancel);\n            });\n\n            ['click', 'contextmenu'].forEach(function (event) {\n                return dialog.addEventListener(event, function () {\n                    return find(dialog, ['ok', 'input']).forEach(function (el) {\n                        return el.focus();\n                    });\n                });\n            });\n\n            dialog.addEventListener('keydown', keyDown(dialog, ok, cancel));\n\n            return promise;\n        }\n\n        function keyDown(dialog, ok, cancel) {\n            return function (event) {\n                var KEY = {\n                    ENTER: 13,\n                    ESC: 27,\n                    TAB: 9,\n                    LEFT: 37,\n                    UP: 38,\n                    RIGHT: 39,\n                    DOWN: 40\n                };\n\n                var keyCode = event.keyCode,\n                    el = event.target;\n\n                var namesAll = ['ok', 'cancel', 'input'],\n                    names = find(dialog, namesAll).map(function (el) {\n                    return getDataName(el);\n                });\n\n                switch (keyCode) {\n                    case KEY.ENTER:\n                        closeDialog(el, dialog, ok, cancel);\n                        event.preventDefault();\n                        break;\n\n                    case KEY.ESC:\n                        remove();\n                        cancel();\n                        break;\n\n                    case KEY.TAB:\n                        if (event.shiftKey) tab(dialog, names);\n\n                        tab(dialog, names);\n                        event.preventDefault();\n                        break;\n\n                    default:\n                        var is = ['left', 'right', 'up', 'down'].some(function (name) {\n                            return keyCode === KEY[name.toUpperCase()];\n                        });\n\n                        if (is) changeButtonFocus(dialog, names);\n\n                        break;\n                }\n\n                event.stopPropagation();\n            };\n        }\n\n        function getDataName(el) {\n            return el.getAttribute('data-name').replace('js-', '');\n        }\n\n        function changeButtonFocus(dialog, names) {\n            var name = '',\n                active = document.activeElement,\n                activeName = getDataName(active),\n                isButton = /ok|cancel/.test(activeName),\n                count = names.length - 1;\n\n            if (activeName !== 'input' && count && isButton) {\n                if (activeName === 'cancel') name = 'ok';else name = 'cancel';\n\n                find(dialog, [name]).forEach(function (el) {\n                    return el.focus();\n                });\n            }\n        }\n\n        function tab(dialog, names) {\n            var active = document.activeElement,\n                activeName = getDataName(active),\n                count = names.length - 1,\n                index = names.indexOf(activeName);\n\n            if (index === count) index = 0;else if (index < count) ++index;\n\n            var name = names[index];\n\n            find(dialog, [name]).forEach(function (el) {\n                return el.focus();\n            });\n        }\n\n        function closeDialog(el, dialog, ok, cancel) {\n            var value = undefined,\n                name = el.getAttribute('data-name').replace('js-', '');\n\n            if (/close|cancel/.test(name)) {\n                cancel();\n            } else {\n                value = find(dialog, ['input']).reduce(function (value, el) {\n                    return el.value;\n                }, null);\n\n                ok(value);\n            }\n\n            remove();\n        }\n\n        function find(element, names) {\n            var elements = names.map(function (name) {\n                return element.querySelector('[data-name=\"js-' + name + '\"]');\n            }).filter(function (el) {\n                return el;\n            });\n\n            return elements;\n        }\n\n        function addListeterAll(event, parent, elements, fn) {\n            find(parent, elements).forEach(function (el) {\n                return el.addEventListener(event, fn);\n            });\n        }\n\n        function removeEl(name) {\n            var el = document.querySelector(name);\n\n            el.parentElement.removeChild(el);\n        }\n\n        function bind(fn) {\n            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                args[_key - 1] = arguments[_key];\n            }\n\n            return function () {\n                return fn.apply(undefined, args);\n            };\n        }\n    }\n})(typeof window !== 'undefined' && window);","(function(global) {\n    'use strict';\n    \n    if (typeof module !== 'undefined' && module.exports)\n        module.exports      = Dialog();\n    else\n        global.Dialog    = Dialog();\n    \n    function Dialog(callback) {\n        if (!(this instanceof Dialog))\n            return new Dialog(callback);\n        \n        let remove              = bind(removeEl, '.smalltalk');\n        \n        const BUTTON_OK         = ['OK'];\n        const BUTTON_OK_CANCEL  = ['OK', 'Cancel'];\n        const BUTTON_YES_NO     = ['OK', 'Cancel'];\n        \n        this.alert = (title, msg, options) => {\n            return showDialog(title, msg, '', BUTTON_OK, options);\n        };\n        \n        this.prompt = (title, msg, defaultValue, options) => {\n            let val         = defaultValue || '';\n            var type        = 'text';\n            var valueStr    = '';\n            // input types\n            let inputText    = `<input type=\"text\" value=\"${ val }\" data-name=\"js-input\">`;\n            let inputPass    = `<input type=\"password\" value=\"${ val }\" data-name=\"js-input\">`;\n\n            // check for options\n            if(typeof options !== 'undefined'){\n                type = options.type || 'text';\n            }\n\n            switch(type){\n                case 'password':\n                    valueStr    = inputPass;\n                    break;\n                default:\n                    valueStr    = inputText;\n            }\n\n            return showDialog(title, msg, valueStr, BUTTON_OK_CANCEL, options);\n        };\n        \n        this.confirm = (title, msg, options) => {\n            return showDialog(title, msg, '', BUTTON_YES_NO, options);\n        };\n        \n        function getTemplate(title, msg, value, buttons) {\n            if (!Array.isArray(buttons))\n                throw Error('buttons should be array!');\n            \n            return `<div class=\"dialog-page\">\n                <div data-name=\"js-close\" class=\"close-button\"></div>\n                <header>${ title }</header>\n                <div class=\"content-area\">\n                    ${ msg }\n                    ${ value }\n                </div>\n                <div class=\"action-area\">\n                    <div class=\"button-strip\"> ${\n                        buttons.map((name, i) =>\n                            `<button tabindex=${ i } data-name=\"js-${ name.toLowerCase() }\">${ name }</button>`\n                        ).join('')\n                    }\n                    </div>\n                </div>\n            </div>`;\n        }\n        \n        function showDialog(title, msg, value, buttons, options) {\n            let dialog  = document.createElement('div'),\n                \n                closeButtons    = [\n                    'cancel',\n                    'close',\n                    'ok',\n                    'no'\n                ],\n                \n                ok, cancel,\n                \n                promise = new Promise((resolve, reject) => {\n                    let noCancel    = options && !options.cancel;\n                    let empty       = () => {};\n                    \n                    ok      = resolve;\n                    cancel  = reject;\n                    \n                    if (noCancel)\n                        cancel = empty;\n                }),\n                \n                tmpl    = getTemplate(title, msg, value, buttons);\n                \n            dialog.innerHTML = tmpl;\n            dialog.className = 'smalltalk';\n            \n            document.body.appendChild(dialog);\n            \n            find(dialog, ['ok', 'input']).forEach(el =>\n                el.focus()\n            );\n            \n            find(dialog, ['input']).forEach(el => {\n                el.setSelectionRange(0, value.length);\n            });\n            \n            addListeterAll('click', dialog, closeButtons, event =>\n                closeDialog(event.target, dialog, ok, cancel)\n            );\n            \n            ['click', 'contextmenu'].forEach(event =>\n                dialog.addEventListener(event, () =>\n                    find(dialog, ['ok', 'input']).forEach(el =>\n                        el.focus()\n                    )\n                )\n            );\n            \n            dialog.addEventListener('keydown', keyDown(dialog, ok, cancel));\n            \n            return promise;\n        }\n        \n        function keyDown(dialog, ok, cancel) {\n            return event => {\n                const KEY   = {\n                    ENTER : 13,\n                    ESC   : 27,\n                    TAB   : 9,\n                    LEFT  : 37,\n                    UP    : 38,\n                    RIGHT : 39,\n                    DOWN  : 40\n                };\n                \n                let keyCode     = event.keyCode,\n                    el          = event.target;\n                \n                let namesAll    = ['ok', 'cancel', 'input'],\n                    names       = find(dialog, namesAll).map(el =>\n                        getDataName(el)\n                    );\n                \n                switch(keyCode) {\n                case KEY.ENTER:\n                    closeDialog(el, dialog, ok, cancel);\n                    event.preventDefault();\n                    break;\n                \n                case KEY.ESC:\n                    remove();\n                    cancel();\n                    break;\n                \n                case KEY.TAB:\n                    if (event.shiftKey)\n                        tab(dialog, names);\n                    \n                    tab(dialog, names);\n                    event.preventDefault();\n                    break;\n                \n                default:\n                    let is = ['left', 'right', 'up', 'down'].some(name =>\n                        keyCode === KEY[name.toUpperCase()]\n                    );\n                    \n                    if (is)\n                        changeButtonFocus(dialog, names);\n                    \n                    break;\n                }\n                \n                event.stopPropagation();\n            };\n        }\n        \n        function getDataName(el) {\n            return el\n                .getAttribute('data-name')\n                .replace('js-', '');\n        }\n        \n        function changeButtonFocus(dialog, names) {\n            let name        = '',\n                active      = document.activeElement,\n                activeName  = getDataName(active),\n                isButton    = /ok|cancel/.test(activeName),\n                count       = names.length - 1;\n            \n            if (activeName !== 'input' && count && isButton) {\n                if (activeName === 'cancel')\n                    name = 'ok';\n                else\n                    name = 'cancel';\n                    \n                find(dialog, [name]).forEach(el =>\n                    el.focus()\n                );\n            }\n        }\n        \n        function tab(dialog, names) {\n            let active      = document.activeElement,\n                activeName  = getDataName(active),\n                \n                count       = names.length - 1,\n                index       = names.indexOf(activeName);\n            \n            if (index === count)\n                index = 0;\n            else if (index < count)\n                ++index;\n            \n            let name = names[index];\n            \n            find(dialog, [name]).forEach(el =>\n                el.focus()\n            );\n        }\n        \n        function closeDialog(el, dialog, ok, cancel) {\n            let value,\n                name = el\n                    .getAttribute('data-name')\n                    .replace('js-', '');\n            \n            if (/close|cancel/.test(name)) {\n                cancel();\n            } else {\n                value = find(dialog, ['input']).reduce((value, el) => {\n                    return el.value;\n                }, null);\n                \n                ok(value);\n            }\n            \n            remove();\n        }\n        \n        function find(element, names) {\n            let elements = names.map(name =>\n                element.querySelector(`[data-name=\"js-${ name }\"]`)\n            ).filter(el =>\n                el\n            );\n            \n            return elements;\n        }\n        \n        function addListeterAll(event, parent, elements, fn) {\n            find(parent, elements).forEach(el =>\n                el.addEventListener(event, fn)\n            );\n        }\n        \n        function removeEl(name) {\n            var el = document.querySelector(name);\n            \n            el.parentElement.removeChild(el);\n        }\n        \n        function bind(fn, ...args) {\n            return () => fn(...args);\n        }\n    }\n    \n})(typeof window !== 'undefined' && window);\n"],"sourceRoot":"/source/"}